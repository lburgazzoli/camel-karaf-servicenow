<?xml version="1.0"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0"
           xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.3.0"
           xmlns:prop="http://camel.apache.org/schema/placeholder"
           xsi:schemaLocation="
    http://www.osgi.org/xmlns/blueprint/v1.0.0 
    https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
    http://camel.apache.org/schema/blueprint 
    http://camel.apache.org/schema/blueprint/camel-blueprint.xsd
    http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.3.0
    http://aries.apache.org/schemas/blueprint-ext/blueprint-ext-1.3.xsd">

  <cm:property-placeholder id="placeholder-cm" persistent-id="com.github.lburgazzoli.servicenow" update-strategy="reload">
    <cm:default-properties>
    </cm:default-properties>
  </cm:property-placeholder>

  <ext:property-placeholder id="placeholder-ext" evaluator="fabric8" placeholder-prefix="$[" placeholder-suffix="]"/>

  <!-- ********************************************************************* -->
  <!-- Beans                                                                 -->
  <!-- ********************************************************************* -->

  <bean id="aggregateUserId" class="com.github.lburgazzoli.camel.AggregateUserId"/>
  <bean id="aggregateIncident" class="com.github.lburgazzoli.camel.AggregateIncident"/>
  <bean id="caseToIncident" class="com.github.lburgazzoli.camel.CaseToIncidentProcessor"/>
  <bean id="incidentImportToCase" class="com.github.lburgazzoli.camel.IncidentImportToCase"/>
  <bean id="caseCommentToIncidentProcessor" class="com.github.lburgazzoli.camel.CaseCommentToIncidentCommentProcessor"/>

  <!-- ********************************************************************* -->
  <!-- ServiceNow                                                            -->
  <!-- ********************************************************************* -->

  <bean id="servicenowConfiguration" class="org.apache.camel.component.servicenow.ServiceNowConfiguration">
    <property name="userName" value="$[k8s:secret:servicenow/username]"/>
    <property name="password" value="$[k8s:secret:servicenow/password]"/>
    <property name="requestModels">
      <map>
        <entry key="${servicenow.incident.import.table}" value="com.github.lburgazzoli.camel.servicenow.model.ServiceNowIncident"/>
      </map>
    </property>
    <property name="responseModels">
      <map>
        <entry key="${servicenow.incident.import.table}" value="com.github.lburgazzoli.camel.servicenow.model.ServiceNowImportSetResponse"/>
      </map>
    </property>
  </bean>

  <bean id="servicenow" class="org.apache.camel.component.servicenow.ServiceNowComponent">
    <property name="configuration" ref="servicenowConfiguration"/>
  </bean>

  <!-- ********************************************************************* -->
  <!-- SalesForce                                                            -->
  <!-- ********************************************************************* -->

  <bean id="salesforceEndpointConfig" class="org.apache.camel.component.salesforce.SalesforceEndpointConfig">
    <property name="notifyForOperationCreate"   value="true"/>
    <property name="notifyForOperationDelete"   value="true"/>
    <property name="notifyForOperationUndelete" value="true"/>
    <property name="notifyForOperationUpdate"   value="true"/>
    <property name="notifyForFields"            value="ALL"/>
    <property name="apiVersion"                 value="${salesforce.api.version}"/>
    <property name="initialReplayIdMap">
      <map>
        <entry key="${salesforce.cases.stream.name}"    value="${salesforce.cases.stream.replay.id}"/>
        <entry key="${salesforce.comments.stream.name}" value="${salesforce.comments.stream.replay.id}"/>
      </map>
    </property>

  </bean>

  <bean id="salesforceLoginConfig" class="org.apache.camel.component.salesforce.SalesforceLoginConfig">
    <property name="userName"     value="$[k8s:secret:salesforce/username]"/>
    <property name="password"     value="$[k8s:secret:salesforce/password]"/>
    <property name="clientId"     value="$[k8s:secret:salesforce/clientid]"/>
    <property name="clientSecret" value="$[k8s:secret:salesforce/clientsecret]"/>
  </bean>

  <bean id="salesforce" class="org.apache.camel.component.salesforce.SalesforceComponent">
    <property name="loginConfig" ref="salesforceLoginConfig"/>
    <property name="config"      ref="salesforceEndpointConfig"/>
    <property name="packages"    value="com.github.lburgazzoli.camel.salesforce.model"/>
  </bean>

  <!-- ********************************************************************* -->
  <!-- Idempotent                                                            -->
  <!-- ********************************************************************* -->

  <bean id="cacheContainer" class="com.github.lburgazzoli.camel.infinispan.InfinispanCacheContainerFactory" factory-method="createContainer" destroy-method="stop">
    <argument>
      <map>
        <entry key="infinispan.client.hotrod.server_list" value="${infinispan.server.list}"/>
        <entry key="infinispan.client.hotrod.force_return_values" value="true"/>
      </map>
    </argument>
  </bean>

  <bean id="idempotent-cases" class="org.apache.camel.component.infinispan.processor.idempotent.InfinispanIdempotentRepository">
    <argument ref="cacheContainer"/>
    <argument value="cases"/>
  </bean>

  <bean id="idempotent-comments" class="org.apache.camel.component.infinispan.processor.idempotent.InfinispanIdempotentRepository">
    <argument ref="cacheContainer"/>
    <argument value="comments"/>
  </bean>

  <!-- ********************************************************************* -->
  <!-- Camel                                                                 -->
  <!-- ********************************************************************* -->

  <camelContext id="camel-context" xmlns="http://camel.apache.org/schema/blueprint">

    <!-- ************************** -->
    <!-- Cases                      -->
    <!-- ************************** -->

    <route id="case-stream">
      <from uri="salesforce:{{salesforce.cases.stream.name}}?updateTopic=true&amp;sObjectQuery=SELECT Id, CaseNumber, InternalID__c FROM Case"/>
      <to uri="log:com.github.lburgazzoli.salesforce-case-stream?level=DEBUG&amp;showHeaders=true&amp;multiline=false"/>

      <throttle prop:timePeriodMillis="salesforce.cases.stream.limit.elements">
        <constant>{{salesforce.cases.stream.limit.period}}</constant>
        <to uri="direct:case-process"/>
      </throttle>

    </route>

    <route id="case-process">
      <from uri="direct:case-process"/>
      <to uri="log:com.github.lburgazzoli.salesforce-case-process?level=DEBUG&amp;showHeaders=true&amp;multiline=false"/>

      <idempotentConsumer messageIdRepositoryRef="idempotent-cases" skipDuplicate="false">
        <header>CamelSalesforceReplayId</header>
        <filter>
          <exchangeProperty>CamelDuplicateMessage</exchangeProperty>
          <log message="SALESFORCE: Skip Case Event ${header[CamelSalesforceReplayId]}" loggingLevel="DEBUG"/>
          <stop/>
        </filter>
        <log message="SALESFORCE: Process Case Event ${header[CamelSalesforceReplayId]}" loggingLevel="INFO"/>

        <setHeader headerName="SalesForceId">
          <simple>${body[Id]}</simple>
        </setHeader>
        <setHeader headerName="SalesForceCaseNumber">
          <simple>${body[CaseNumber]}</simple>
        </setHeader>
        <setHeader headerName="SalesForceInternalId">
          <simple>${body[InternalID__c]}</simple>
        </setHeader>
        <setBody>
          <simple>${body[Id]}</simple>
        </setBody>
        <setHeader headerName="sObjectName">
          <constant>Case</constant>
        </setHeader>

        <doTry>
          <enrich>
              <constant>salesforce:getSObject</constant>
          </enrich>
          <enrich strategyRef="aggregateUserId">
            <constant>direct:servicenow-search-user</constant>
          </enrich>
          <enrich strategyRef="aggregateIncident">
            <constant>direct:servicenow-search-incident</constant>
          </enrich>

          <process ref="caseToIncident"/>

          <choice>
            <when>
              <simple>${header[ServiceNowUpdate]} == true</simple>

              <setHeader headerName="CamelServiceNowResource">
                <constant>import</constant>
              </setHeader>
              <setHeader headerName="CamelServiceNowTable">
                <constant>{{servicenow.incident.import.table}}</constant>
              </setHeader>
              <setHeader headerName="CamelServiceNowAction">
                <constant>create</constant>
              </setHeader>

              <log message="SERVICENOW: Process Case ${body.correlationId}" loggingLevel="INFO"/>
              <to uri="direct:servicenow"/>

              <choice>
                <when>
                  <!-- check that ServicenNow has returned a proper answer -->
                  <simple>${body} is 'java.util.Collection'</simple>

                  <setBody>
                    <simple>${body[0]}</simple>
                  </setBody>
                  <choice>
                    <when>
                      <simple>${body.status} != 'error' &amp;&amp; ${header[SalesForceInternalId]} == null</simple>
                      <process ref="incidentImportToCase"/>
                      <log message="SALESFORCE: Update ${header[SalesForceCaseNumber]} / ${body.internalID__c}" loggingLevel="INFO"/>
                      <to uri="direct:salesforce-update"/>
                    </when>
                  </choice>

                </when>
                <otherwise>
                  <log loggingLevel="WARN" message="ServiceNow didn't return a result"/>
                </otherwise>
              </choice>

            </when>
          </choice>

          <doCatch>
            <exception>org.apache.camel.component.salesforce.api.SalesforceException</exception>
            <log message="Error processing Case with ID: ${header[SalesForceId]}" loggingLevel="INFO"/>
          </doCatch>
        </doTry>
      </idempotentConsumer>
    </route>

    <!-- ************************** -->
    <!-- Case Comments              -->
    <!-- ************************** -->


    <route id="comment-stream">
      <from uri="salesforce:{{salesforce.comments.stream.name}}?updateTopic=true&amp;sObjectQuery=SELECT Id, CommentId__c FROM Comment_Event__c"/>
      <to uri="log:com.github.lburgazzoli.salesforce-comment-stream?level=DEBUG&amp;showHeaders=true&amp;multiline=false"/>

      <throttle prop:timePeriodMillis="salesforce.comments.stream.limit.elements">
        <constant>{{salesforce.comments.stream.limit.period}}</constant>
        <to uri="direct:comment-process"/>
      </throttle>

    </route>

    <route id="comment-process">
      <from uri="direct:comment-process"/>
      <to uri="log:com.github.lburgazzoli.salesforce-comment-process?level=DEBUG&amp;showHeaders=true&amp;multiline=false"/>

      <filter>
        <simple>${body[CommentId__c]} == null</simple>
        <log message="CommentId__c not present" loggingLevel="WARN"/>
      </filter>

      <setHeader headerName="SalesForceEventId">
        <simple>${body[Id]}</simple>
      </setHeader>
      <setHeader headerName="SalesForceCommentId">
        <simple>${body[CommentId__c]}</simple>
      </setHeader>

      <idempotentConsumer messageIdRepositoryRef="idempotent-comments" skipDuplicate="false">
        <header>SalesForceCommentId</header>
        <filter>
          <exchangeProperty>CamelDuplicateMessage</exchangeProperty>
          <log message="SALESFORCE: Skip Case Comment Event ${header[SalesForceCommentId]}" loggingLevel="DEBUG"/>
          <stop/>
        </filter>
        <log message="SALESFORCE: Process Case Comment Event ${header[SalesForceCommentId]}" loggingLevel="INFO"/>

        <setBody>
          <simple>${header[SalesForceCommentId]}</simple>
        </setBody>
        <setHeader headerName="sObjectName">
          <constant>CaseComment</constant>
        </setHeader>

        <doTry>
          <enrich>
            <constant>salesforce:getSObject</constant>
          </enrich>

          <setHeader headerName="SalesForceParentId">
            <simple>${body.parentId}</simple>
          </setHeader>
          <setHeader headerName="SalesForceComment">
            <simple>${body.commentBody}</simple>
          </setHeader>
          <setHeader headerName="sObjectName">
            <constant>Case</constant>
          </setHeader>
          <setHeader headerName="sObjectId">
            <simple>${header[SalesForceParentId]}</simple>
          </setHeader>
          <setHeader headerName="sObjectFields">
            <constant>Id,CaseNumber,InternalID__c</constant>
          </setHeader>

          <!--
            need to do so otherwise getSObject thinks we are still talking about
            case comments
          -->
          <setBody>
            <simple>${null}</simple>
          </setBody>

          <enrich>
            <constant>salesforce:getSObject</constant>
          </enrich>

          <choice>
            <when>
              <simple>${body.internalID__c} != null</simple>

              <process ref="caseCommentToIncidentProcessor"/>

              <setHeader headerName="CamelServiceNowResource">
                <constant>import</constant>
              </setHeader>
              <setHeader headerName="CamelServiceNowTable">
                <constant>{{servicenow.incident.import.table}}</constant>
              </setHeader>
              <setHeader headerName="CamelServiceNowAction">
                <constant>create</constant>
              </setHeader>

              <to uri="direct:servicenow"/>

            </when>
          </choice>

          <doCatch>
            <exception>org.apache.camel.component.salesforce.api.SalesforceException</exception>
            <log message="Error processing Comment with ID: ${header[SalesForceEventId]}" loggingLevel="INFO"/>
          </doCatch>
        </doTry>
      </idempotentConsumer>
    </route>

    <!-- ************************** -->
    <!-- Helpers                    -->
    <!-- ************************** -->

    <route>
      <from uri="direct:salesforce-update"/>
      <to uri="log:com.github.lburgazzoli.salesforce-update-action?level=DEBUG&amp;showHeaders=true&amp;multiline=false"/>
      <to uri="salesforce:updateSObject"/>
      <to uri="log:com.github.lburgazzoli.salesforce-update-result?level=DEBUG&amp;showHeaders=true&amp;multiline=false"/>
    </route>

    <route>
      <from uri="direct:servicenow"/>
      <to uri="log:com.github.lburgazzoli.servicenow-action?level=DEBUG&amp;showHeaders=true&amp;multiline=false"/>
      <to uri="servicenow:{{servicenow.instance.name}}?excludeReferenceLink=true"/>
      <to uri="log:com.github.lburgazzoli.servicenow-result?level=DEBUG&amp;showHeaders=true&amp;multiline=false"/>
    </route>

    <route>
      <from uri="direct:servicenow-search-user"/>
      <setHeader headerName="CamelServiceNowResource">
        <constant>table</constant>
      </setHeader>
      <setHeader headerName="CamelServiceNowAction">
        <constant>retrieve</constant>
      </setHeader>
      <setHeader headerName="CamelServiceNowTable">
        <constant>sys_user</constant>
      </setHeader>
      <setHeader headerName="CamelServiceNowQuery">
        <simple>email=${body.contactEmail}</simple>
      </setHeader>
      <setHeader headerName="CamelServiceNowModel">
        <constant>com.github.lburgazzoli.camel.servicenow.model.ServiceNowUser</constant>
      </setHeader>
      <to uri="direct:servicenow"/>
    </route>

    <route>
      <from uri="direct:servicenow-search-incident"/>
      <setHeader headerName="CamelServiceNowResource">
        <constant>table</constant>
      </setHeader>
      <setHeader headerName="CamelServiceNowAction">
        <constant>retrieve</constant>
      </setHeader>
      <setHeader headerName="CamelServiceNowTable">
        <constant>incident</constant>
      </setHeader>
      <setHeader headerName="CamelServiceNowQuery">
        <simple>correlation_id=SF-${body.id}-${body.caseNumber}</simple>
      </setHeader>
      <setHeader headerName="CamelServiceNowModel">
        <constant>com.github.lburgazzoli.camel.servicenow.model.ServiceNowIncident</constant>
      </setHeader>
      <to uri="direct:servicenow"/>
    </route>

  </camelContext>

</blueprint>
